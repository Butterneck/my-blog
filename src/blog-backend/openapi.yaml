# TODO: make this a template
openapi: 3.0.0
info:
  title: CRUD API for Posts
  version: 1.0.0
servers:
- url: "https://blog.butterneck.me"
paths:
  /api/v1/posts:
    get:
      operationId: getPublishedPosts
      summary: Retrieve a list of published posts
      responses:
        200:
          description: A list of published posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        500:
          description: Internal Server Error
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: ${integration_uri}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /api/v1/admin/posts:
    get:
      operationId: getAllPosts
      summary: Retrieve a list of posts
      responses:
        200:
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminPost'
        500:
          description: Internal Server Error
      security:
        - admin-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: ${integration_uri}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      operationId: createPost
      summary: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPostRequest'
      responses:
        201:
          description: Post successfully created
        400:
          description: Bad Request
        500:
          description: Internal Server 
      security:
      - admin-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: ${integration_uri}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /api/v1/posts/{slug}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getPublishedPost
      summary: Retrieve a published post
      responses:
        200:
          description: The requested post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: Post not found
        500:
          description: Internal Server Error
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: ${integration_uri}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /api/v1/admin/posts/{slug}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getAnyPost
      summary: Retrieve a post
      responses:
        200:
          description: The requested post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminPost'
        404:
          description: Post not found
        500:
          description: Internal Server Error
      security:
        - admin-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: ${integration_uri}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      operationId: updatePost
      summary: Update a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        200:
          description: Post successfully updated
        400:
          description: Bad Request
        404:
          description: Post not found
        500:
          description: Internal Server Error
      security:
      - admin-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: ${integration_uri}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      operationId: deletePost
      summary: Delete a post
      responses:
        204:
          description: Post successfully deleted
        404:
          description: Post not found
        500:
          description: Internal Server Error
      security:
      - admin-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: ${integration_uri}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /api/v1/admin/posts/{slug}/publish:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    post:
      operationId: publishPost
      summary: Publish the draft of a post
      responses:
        201:
          description: Post successfully created
        400:
          description: Bad Request
        500:
          description: Internal Server
      security:
      - admin-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: ${integration_uri}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
components:
  schemas:
    Post:
      type: object
      required:
        - title
        - body
        - slug
        - creationDate
      properties:
        title:
          type: string
        body:
          type: string
        slug:
          type: string
        creationDate:
          x-go-type: int64
          type: integer
    AdminPost:
      type: object
      required:
        - title
        - body
        - creationDate
        - slug
        - draft
      properties:
        title:
          type: string
        body:
          type: string
        creationDate:
          type: integer
          x-go-type: int64
        slug:
          type: string
        draft:
          $ref: '#/components/schemas/PostDraft'
    PostDraft:
      type: object
      required:
        - title
        - body
      properties:
        title:
          type: string
        body:
          type: string
    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
    NewPostRequest:
      type: object
      required:
        - title
        - body
      properties:
        title:
          type: string
        body:
          type: string
  securitySchemes:
    admin-authorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        providerARNs:
        - ${cognito_user_pool_arn}
        type: "cognito_user_pools"
        